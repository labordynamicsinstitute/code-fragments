SAS Efficiencies
Tips:
- "select" egual to "if-then-else"
- subsetting using "where" is 
	more efficient than "if"
	(condition: var must exist,
	 must be SAS dataset)
- use _null_ for junk datasets 
	( -50%I/O)
- always use SAS datasets
- "proc copy" preferable to 
	"data one,set two"
- use RETAIN to set constant values
	(compile time instead of exec t)
- increment statement:
	"count+1+othfct;" implies:
	# retain count 0;
	# count=sum(count,1,othfct);

Observation/File size
===============
- modify bufsize=, bufno= ? (pg.114)
- LENGTH statements /before/ SET
- increases CPU because PDV always 
	expands to 8byte numeric!!

INDEXES
======
- set OPTIONS MSGLEVEL=I
- PROC SORT needs FORCE option, 
	otherwise won't sort
- for lookup (1 on 1) merges: 
	improves on I/O, but only gets first obs
-!!!!use _IORC_ to control for actual merges
- BY usage: more I/O
- WHERE: only one index can be used. 
- WHERE: indexing cannot deteriorate performance

FORMATS
=======
- keywords: OTHER, LOW, HIGH
- use ranges: low-0, 0<-10, 'fa1-fa3'
- OPTIONS statement: 
	FMTSEARCH=(libname lib.cat)
- use PUT function (char!) to compare based on formats
- option: CNTLIN= to automate creation of formats
- option: CNTLOUT= outputs formats to an (editable) SAS dataset
- option: FMTLIB to print contents of formats