Subject: Augmented documentation for Double Set
Date: June 30, 2000

The original double set code developed by Kevin and Lars is suitable
for a unique list of key values in the TRANSACTION dataset and
multiple records for the key variable in the MASTER dataset.

NOTE:  If the MASTER dataset is known to have only one record for each
key value then the code in example one is more efficient although the
original code will still work. 

SAS code:

data out;
   set in.TRANSACTION;

continue=0;
do while ( continue=0 );
    set in.MASTER key=sein_year_quarter;
    if _iorc_ = 0 then do;
        output;
    end;
    else do;
       _error_=0;
       continue=1;
    end;
end;
run;

NOTE: Only the matches are output in these examples.  Additional code will be
needed to handle non-matches.



The original double set code is not designed to handle lookups for the following
situations.

1.  The dataset in the first set statement(TRANSACTION) is not a unique list
 of key values and the dataset in the second set statement(MASTER) does
 have a unique set of key values. 

Example:

Below is the data in the first or transaction dataset. The KEY is
SEIN YEAR QUARTER.  The key value is repeated for the first two records
and again in the fifth record.

Using the standard double set code SAS will not find a record in the master
dataset for the second record in the transaction dataset.  This occurs
because SAS does not move the pointer from its previous position until it
needs to look up a record in the transaction dataset with  a different key
value.  Observation five, like observation two, has the same key value as
observation one.  A record from the master dataset will be returned for
observation five since the pointer has been moved when the double set
was issued for observations three and four(they have a different key value). 

Obs SEIN        Year Quarter
----------------------------
1  170000000000 1990 1
2  170000000000 1990 1
3  170000000001 1991 1
4  170000000001 1992 4
5  170000000000 1990 1
6  170000000071 1992 4
7  170000000449 1992 3
8  170000000528 1990 1
9  170000000798 1991 2
10 170000001003 1992 1


SAS code:

data out;
    set in.TRANSACTION;

    set in.MASTER key=sein_year_quarter /unique;
    if _iorc_ = 0 then do;
        output out1;
    end;
    else do;
       _error_=0;
    end;
run;

In this case we can remove the continue loop since the observations in the
MASTER dataset are unique.  We also must add the UNIQUE option to the
second set statement.  This code is more efficient than the original
double set code since only one lookup is performed for each record in
the transaction dataset.  Use this in all cases when you know the
MASTER dataset key is unique.



2.  The dataset in the first set statement(TRANSACTION) is not a unique list
 of key values and the dataset in the second set statement(MASTER) does NOT
 have a unique set of key values. 

Example:

Imagine we are looking up a series of EIN's from the work 
history file in the SSEL.  Some of these EIN's will be repeated since 
individuals work for the same EIN in different years and also because
multiple people work at the same firm.

The list has the same structure as in example one.  The KEY is repeated for
observation one, two, and five.


Obs EIN
------------
1  952792090
2  952792090
3  060798647
4  581117809
5  952792090


SAS code:

data out;
   set TRANSACTION;

continue=0;
continue1=0;
do while ( continue=0 );
    set in.MASTER key=ein;
    if continue1=1 then continue=1;
    if _iorc_ = 0 then do;
        output;
        end;
    else do;
       _error_=0;
       ein="zzzzzzzzz";
       continue1=1;
    end;
end;
run;

This case requires resetting the pointer on each iteration of the data step.
Unfortunately this requires two additional lookups in the MASTER dataset. Once
to know when the end of all the records for that EIN is reached. Once more
to reset the pointer.

Resetting the pointer is accomplished by looking up a key value that does not
exist in the MASTER dataset.  I have chosen "zzzzzzzzz" for the EIN.  This may
or may not be appropriate in your application. 
