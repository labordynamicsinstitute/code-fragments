#!/bin/bash

####################################################################################
# Note to future generations/programmers:
#
# The qtility script was designed for use on a number of the Census Bureau's 
# research computers. It implements easy access points for users to run standard
# processing tools within the PBS Pro queueing system. Primarily this is meant
# for the majority of users who want to "just run my SAS program" or whatever.
# This is not going to be all that useful for a small set of expert PBS Pro users
# who need very specific tweaks for their programs to run. Some of the most basic
# and useful PBS options will be implemented here. And others can be added in the
# future as needed.
#
# A few requirements:
# - Calling qtility will be done with links. So, for example, we'll have:
#   qstata -> qtility, or
#   qR -> qtility, and the main qtility script will figure how it was called and how
#   it should work based on that.
# - For the most basic operations, the q script should be fully subtitutable for the
#   the original program call (i.e. "sas myprogram.sas" can be replace with
#   "qsas myprogram.sas"). Kind of a "simple mode".
# - Some PBS- and program-specific options can be accessed with double-dash command
#   line options in a sort of "advanced mode".
# - Changes to the core qtility script should not - in general - change the way 
#   currently implemented scripts work.
#
#
# The overall architecture of the script is as follows:
# 1. Parse the script name so we know how to handle program-specific stuff.
# 2. Parse the general arguments.
# 2a. Parse the program-specific arguments.
# 3. Check the general arguments for consistency and complete them if necessary.
# 3b. Check the program-specific arguments.
# 4. If requested, print all the checked/completed parameters.
# 5. If not in debug mode, submit the program-specific job.
#
#
# To Do:
# 1. Finish implementing err flag. In general err should be set to true when there
#    is a problem. This should trigger a somewhat graceful exit at a later point.
# 2. Implement qstata
# 3. Implement qR
# 4. Implement qgauss
# 5. Implement qmatlab
#
# NOTE: To prevent confusion with currently implemented scripts, this program expects
# to be called with scripts that have a "2" suffixed on to the standard script names.
# So for example, since qsas is being actively used, this script should be called
# with qsas2. When this script is ready to go to production, this can be fixed by
# altering the parse_script_call function.
####################################################################################
# Initializations.

# Check out how the script was called.
script=$(basename $0)

# Get argument information.
args=$@
argcnt=$#

# Set the initial error condition.
err=false

# Temporary variables for debugging.
verbose=yes
echo=echo

# parameters - may be overridden later
cpumin=1
cpumax=24
memmin=2048
memmax=122880
cpudef=1
memdef=5120

# sundry
deflogext=log
# if using different submission program, replace
qsub=qsub 

####################################################################################
function print_help
{
    cat << EOF


Usage: $thisprog prog[.${EXT:-EXT}] [CHUNKS/CPUCOUNT]
       $thisprog --program=prog[.${EXT:-EXT}] [OPTION]... 

Launch $SOFTWARE under PBS-like systems and allow adjustment of $SOFTWARE command-line parameters.
Setting the program name is mandatory, all other parameters are optional.
EOF
	${OPT}_help head
    cat << EOF
By default the number of chunks/cpucount is $cpudef.

Options:
EOF
	cat << EOF
    --program=FILE        Run FILE using $SOFTWARE in a PBS-like system.
    --logfile=FILE        Name of the log file. If not specified, it will be the default: FILE.${deflogext}.
    --chunks=NUM,
    --cpucount=NUM        Use NUM chunks/CPUs to process the program. Default: ${cpudef}. Max: $cpumax
    --memsize=NUM         Set the memsize as NUM megabytes. Default: $memdef per CPU. Max: $memmax
    --pbsname=LABEL       Set the name of the job for entering in the PBS queue. The standard is to
                          use the first 15 digits of the program name.
    --mailops=OPS         Set the PBSPro events for which emails should be sent. The --mailto option must be set
                          properly for any email notifications to go out. The options are as follow:
                          n=No Emails (default); a=Send mail if job is aborted; b=Send mail when job executes; and
                          e=Send mail when job terminates. a, b, and e, can be used in combination.
    --mailto=ADDR         Send PBSPro event emails to ADDR, which should be in the form of USER@SERVER. Use
                          the --mailops option to set which event emails should be sent.
${SOFTWARE}-specific parameters:
EOF
	${OPT}_help opts
    cat << EOF

Advanced parameters:
    --verbose             Turn on verbose mode. Prints all settings prior to running job.
    --force               Ignore most warnings that lead to job abortion and proceed anyway. USE WITH CAUTION!
    --debug               Turn on debug. All code will run except that the job will not be placed in the PBS
                          queue. Also, running in debug mode will set the verbose flag as well.

Based on code by Rob Creecy
General qtility code written by Matthew Graham
EOF
	${OPT}_help tail
	exit 0
}
####################################################################################

####################################################################################
# This function determines how the script what called. Later this will help us 
# understand how to parse the rest of the command string.
#
# Any option that appears here must have a complete function handler, which consists
# of the following:
# - OPT_help
# - OPT_parse_args
# - OPT_check_args
# - OPT_verbose_print
# - OPT_submit
#
function parse_script_call
{
	thisprog=$(basename $0)
	# strip out a leading q
	_gopt=$(echo $thisprog| sed 's/^q//' )
	echo "Called with $thisprog - trying to identify plugin"

	case $_gopt in
        sas2)
			OPT=qsas
			;;
        stata2)
			OPT=qstata
            ;;
        R2)
			OPT=qR
            ;;
        gauss2)
			OPT=qgauss
            ;;
        matlab2)
			OPT=qmatlab
            ;;
        tility)
			OPT=qtemplate
            ;;
        *)
			OPT=q$_gopt
            ;;
	esac

# define the plugin to use
plugin=$(dirname $(readlink -f $0))/qtility.$OPT
if [[ -f $plugin ]]
then
	echo "Using plugin for $OPT ... found."
else
        echo "WHOA! No plugin found..."
	exit 2
fi
}
####################################################################################

####################################################################################
# This function pulls out the general arguments that are needed by PBS Pro and which
# should be standard across all the different options. All other arguments should be
# passed to the option specific parser.
#
# The general arguments that need to be parsed are:
# - pbsname
# - mailto
# - mailops
# - resources (memsize cpucount)
# - memsize
# - cpucount
# - verbose
# - debug
# - quiet
#
function parse_args
{
	set -- $args
	[[ $# = 0 ]] && print_help
	case $1 in
		--help|-h)
			print_help
			;;
		-*)
			positional=no
			;;
		*)
			positional=yes
			[[ -z $1 ]] || program=$1
			${OPT}_parse_args positional
			;;
	esac
	[[ $positional = yes ]] && return

	remaining_args=
	while [[ ! -z $1 ]]
	do
		case $1 in
			--program*)
				program=${1##*=}
				;;
                        --logfile*)
                                logfile=${1##*=}
                                ;;
			--chunks*)
				cpucount=${1##*=}
				;;
			--cpucount*)
				cpucount=${1##*=}
				;;
			--memsize*)
				rawmemsize=${1##*=}
				;;
			--pbsname*)
				pbsname=${1##*=}
				;;
			--mailops*)
				mailops=${1##*=}
				;;
			--mailto*)
				mailto=${1##*=}
				;;
		    --verbose*)
			    verbose=yes
				;;
		    --force*)
			    force=yes
				;;
		    --debug*)
		        echo "Debug Mode On: PBS Job will NOT be started."
		        debug=yes
 		        verbose=yes
			qsub=less
				;;
			--quiet*)
				quiet=yes
				;;
			--*)
				# Found option-specific positional parameter. Passing it on.
				remaining_args="$remaining_args $1"
				;;
			*)
				echo "Oops. Bad parameter structure. Optional parameters require a leading '--'. Check your command line"
				echo "Your poorly structured parameter was: $1"
				err=true
				;;
		esac
		shift
	done
	[[ -z $program && -z $cpucount ]] && print_help
	${OPT}_parse_args optional $remaining_args

}
####################################################################################

####################################################################################
function check_args
{
	# Checking general arguments
    [[ -z $pbsname ]] && pbsname=${baseprog:0:15}
    [[ -z $mailto ]] && mailto=$USER
    [[ -z $mailops ]] && mailops=n
    [[ -z $logfile ]] && logfile=${program}.${deflogext}

        # Check cpucount, and put it in range: cpumin .le. cpucount .le. cpumax
	[[ -z $cpucount ]] && cpucount=$cpudef
        if [[ $cpucount -lt $cpumin ]]
        then
            echo "Warning: cpucount not allowed to be less than $cpumin. Resetting to $cpumin."
            cpucount=$cpumin
        fi
        if [[ $cpucount -gt $cpumax ]]
        then
		echo "Warning: cpucount not allowed to be greater than $cpumax. "
		echo "Reset to $cpumax and resubmit."
#		cpucount=$cpumax
		[[ -z $force ]] && exit 2
        fi

	[[ -z $rawmemsize ]] && rawmemsize=$(( ${cpucount}*$memdef ))
	if [[ $rawmemsize -lt $memmin ]]
	then
	    echo "Warning: memsize not allowed to be less than $memmin (MB). Resetting to $memmin MB."
	    rawmemsize=$memmin
	fi
	if [[ $rawmemsize -gt $memmax ]]
	then
		echo "Warning: memsize not allowed to be greater than $memmax GB.  "
		echo "Reset to $memmax  MB and resubmit"
#	    rawmemsize=$memmax
		[[ -z $force ]] && exit 2
	fi

	# Call program-specific argument parser.
	${OPT}_check_args

# generic formatting
	resources="-l ncpus=$cpucount,mem=${rawmemsize}mb"


# while testing only
	        debug=yes
 	
}
####################################################################################



####################################################################################




####################################################################################
#------ Run Main Program ------
parse_script_call
# here, we source the QOPT-specific code
[[ -f $plugin ]] && source $plugin
parse_args
check_args
[[ -z $verbose ]] || ${OPT}_verbose_print
${OPT}_submit | $qsub

