#!/bin/bash

args=$@
argcnt=$#
function print_help
{
    cat << EOF
Launch STATA under PBS-like systems.

Usage: qstata FILE[.do]
       qstata --dofile=FILE[.do] [OPTIONS] 

Options:
    --dofile=FILE         Run FILE using STATA in a PBS-like system. The '.do' extension need not be specified.
    --statatype=TYPE	  Use STATA-MP (TYPE=mp) or STATA-SM (TYPE=sm) instead of STATA-SE.  Invoking STATA-MP 
			  will make use of up to 4 cpus; otherwise one cpu will be used.
    --memsize=NUM          Use NUM memory (in MB) to process the STATA program. Limit is 120 GB.  Default memory 
			  allocation is 32GB for STATA-MP and 8GB otherwise.
    --nologo 	          Suppress logo and any initialization messages in STATA output.
    --pbsname=LABEL       Set the name of the job for entering in the PBS queue. The standard is to
                          use the first 15 digits of the program name.
    --mailops=OPS         Set the PBSPro events for which emails should be sent. The --mailto option must be set
                          properly for any email notifications to go out. The options are as follow:
                          n=No Emails (default); a=Send mail if job is aborted; b=Send mail when job executes; and
                          e=Send mail when job terminates. a, b, and e, can be used in combination.
    --mailto=ADDR         Send PBSPro event emails to ADDR, which should be in the form of USER@SERVER. Use
                          the --mailops option to set which event emails should be sent.
    --verbose             Turn on verbose mode. Prints all settings prior to running job.
    --debug               Turn on debug. All code will run except that the job will not be placed in the PBS
                          queue. Also, running in debug mode will set the verbose flag as well.

Version 0.01
qstata is a hack by Graton Gathright of the qsas program that was written by Rob Creecy and modified by Matthew Graham.
Report bugs to <graton.m.gathright@census.gov>.
EOF

exit 0
}

function parse_args
{
	set -- $args
	[[ $# = 0 ]] && print_help
	case $1 in
		--help|-h)
			print_help
			;;
		-*)
			positional=no
			;;
		*)
			positional=yes
			[[ -z $1 ]] || dofile=$1
			[[ -z $2 ]] || cpucount=$2
			if [[ $# -gt 2 ]]
			then
			    echo "Warning: Too many positional parameters."
			    print_help
			fi
			quiet=no
			;;
	esac
	[[ $positional = yes ]] && return

	while [[ ! -z $1 ]]
	do
		case $1 in
			--dofile*)
				dofile=${1##*=}
				;;
			--memsize*)
				memsize=${1##*=}
				;;
			--pbsname*)
				pbsname=${1##*=}
				;;
			--statatype*)
				statatype=${1##*=}
				;;
			--nologo*)
				nologo=-q
				;;
			--mailops*)
				mailops=${1##*=}
				;;
			--mailto*)
				mailto=${1##*=}
				;;
		    --verbose*)
			    verbose=yes
				;;
		    --debug*)
		        echo "Debug Mode On: PBS Job will NOT be started."
		        debug=yes
 		        verbose=yes
				;;
			--quiet*)
				quiet=yes
				;;
			*)
				echo "Oops. Unknown parameter. Check your command line"
				echo "$*"
				exit 2
				;;
		esac
		shift
	done
#	[[ -z $dofile ]] && print_help

}

function calc_params
{
	baseprog=$(basename $dofile .do)
	dofile=$(dirname $dofile)/$baseprog.do

	[[ -z $statatype ]] && statatype=se
	
	cpucount=1
	if [[ "$statatype" = "mp" ]]
	then
		cpucount=4
	fi
	
	[[ -z $memsize ]] && memsize=$(( ${cpucount}*8192 ))
	
	if [[ $memsize -lt 20 ]]
	then
	    echo "Warning: memsize not allowed to be less than 20 (MB). Resetting to 20MB."
	    memsize=20
	fi
	if [[ $memsize -gt 122880 ]]
	then
	    echo "Warning: memsize not allowed to be greater than 120 GB. Resetting to 122880 MB."
	    memsize=122880
	fi
	
	[[ -z $nologo ]] && nologo=
	[[ -z $pbsname ]] && pbsname=${baseprog:0:15}
    	[[ -z $mailto ]] && mailto=$USER
    	[[ -z $mailops ]] && mailops=n
	resources="-l ncpus=$cpucount,mem=${memsize}mb"

}

function verbose_print
{
    cat <<EOF
Verbose Mode On

PARAMETERS:
dofile=$dofile 
statatype=$statatype
cpus=$cpucount 
memsize=$memsize 
nologo=$nologo
pbsname=$pbsname 
mailto=$mailto
mailops=$mailops
resources=$resources
stata command=stata-$statatype $nologo -b do $dofile 

EOF
}

function run_program
{
    echo '#!/bin/bash' "
#PBS -N $pbsname
#PBS -M $mailto
#PBS -m $mailops
#PBS $resources
#PBS -j oe
cd $PWD
stata-$statatype $nologo -b do $dofile" | qsub
}


#------ Run Main Program ------
parse_args
calc_params
[[ -z $verbose ]] || verbose_print
[[ -z $debug ]] && run_program

